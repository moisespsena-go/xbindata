// Code generated by xbindata. DO NOT EDIT.
// sources:
package assets

import (
	"errors"
	"github.com/moisespsena-go/assetfs"
	fsapi "github.com/moisespsena-go/assetfs/assetfsapi"
	"github.com/moisespsena-go/io-common"
	"github.com/moisespsena-go/path-helpers"
	"github.com/moisespsena-go/xbindata/outlined"
	bc "github.com/moisespsena-go/xbindata/xbcommon"
	fs "github.com/moisespsena-go/xbindata/xbfs"
	br "github.com/moisespsena-go/xbindata/xbreader"
	"os"
	"path/filepath"
	"regexp"
	"strings"
	"sync"
)

const Size = 4

var (
	_outlined     *outlined.Outlined
	outlinedPath  string
	outlinedPaths []string
	loaded        bool
	ended         bool
	mu            sync.Mutex

	StartPos int64
	Assets   bc.Assets

	pkg                   = path_helpers.GetCalledDir()
	envName               = "XBINDATA_ARCHIVE__" + strings.ToUpper(regexp.MustCompile("[\\W]+").ReplaceAllString(pkg, "_"))
	OpenOutlined          = br.Open
	OutlinedReaderFactory = func(start, size int64) func() (reader iocommon.ReadSeekCloser, err error) {
		return func() (reader iocommon.ReadSeekCloser, err error) {
			return OpenOutlined(outlinedPath, _outlined.StartPos+start, size)
		}
	}
)

func EnvName() string {
	return envName
}

func OutlinedPath() string {
	return outlinedPath
}

func Outlined() (archiv *outlined.Outlined, err error) {
	if _outlined == nil {
		mu.Lock()
		defer mu.Unlock()

		if _outlined, err = outlined.OpenFile(outlinedPath, ended); err != nil {
			return
		}
	}
	return _outlined, nil
}

func LoadDefault() {
	if outlinedPath == "" {
		pths := append(strings.Split(os.Getenv(envName), string(filepath.ListSeparator)), "_assets/assets.xb.gz", "_assets/assets.xb")
		for _, pth := range pths {
			if pth == "" {
				continue
			}

			if _, err := os.Stat(pth); err == nil {

				outlinedPath = pth
				break
			} else if !os.IsNotExist(err) {
				panic(err)
			}
		}

		if outlinedPath == "" {
			panic(errors.New("outlined path not defined"))
		}
	}

	Assets.Factory = func() (assets map[string]bc.Asset, err error) {
		archiv, err := Outlined()
		if err != nil {
			return nil, err
		}

		return archiv.AssetsMap(OutlinedReaderFactory), nil
	}

	loaded = true
}

func IsLocal() bool {
	if _, err := os.Stat("inputs/a"); err == nil {
		return true
	}
	return false
}

func FS() fsapi.Interface {
	Load()
	if IsLocal() {
		return LocalFS
	}
	return DefaultFS
}

var DefaultFS fsapi.Interface = fs.NewFileSystem(&Assets)
var LocalFS = assetfs.NewAssetFileSystem()

func LoadLocal() {
	var inputs = []string{
		"inputs/a",
		"inputs/b",
		"another_input",
	}
	localDir := filepath.Join("_assets", filepath.FromSlash(pkg))
	if _, err := os.Stat(localDir); err == nil {
		for i, pth := range inputs {
			inputs[i] = filepath.Join(localDir, pth)
		}
	} else if !os.IsNotExist(err) {
		panic(err)
	}
	for _, pth := range inputs {
		if err := LocalFS.RegisterPath(pth); err != nil {
			panic(err)
		}
	}
}
func Load() {
	if loaded {
		return
	}
	mu.Lock()
	defer mu.Unlock()
	if loaded {
		return
	}
	if IsLocal() {
		LoadLocal()
	} else {
		LoadDefault()
	}
	loaded = true
}

func init() { Load() }
